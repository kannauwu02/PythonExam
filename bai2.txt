Functional tools (functools)
- All features includes: cache, cached_property, cmp_to_key, lru_cache, total_ordering, partial, 
partialmethod, reduce, singledispatch, singledispatchmethod, update_wrapper, wraps.

+ cache: A decorator that caches the return value of a function so that subsequent 
calls with the same arguments can return the cached value instead of recomputing it.    

+ cached_property: A decorator that transforms a method of a class into a property 
whose value is computed once and then cached as a normal attribute for the life of the instance.

+ cmp_to_key (function(iterable, key=cmp_to_key(cmp_function))): A function that converts a comparison function 
into a key function that can be used in sorting or ordering functions such as sorted(), min(), max(), etc.

+ lru_cache (lru_cache(maxsize=128, typed=False)): A decorator that implements a least-recently-used cache for 
a function, with a size limit and an option to make it thread-safe.

+ total_ordering: A class decorator that fills in missing ordering methods for a class that defines 
one or more ordering methods such as lt, le, gt, or ge.

+ partial(func, /, *args, **keywords): A class that allows partial application of a function, i.e., fixing some 
arguments and keywords and returning a new callable object with the remaining arguments and keywords.

+ partialmethod(func, *args, **keywords): A class that allows partial application of a method, similar to 
partial but works on methods instead of functions.

+ reduce(function, sequence[, initial]): A function that applies a function of two arguments cumulatively 
to the items of an iterable, from left to right, to reduce the iterable to a single value.

+ singledispatch: A decorator that transforms a function into a single-dispatch generic function, i.e., 
a function that can have different behaviors depending on the type of its first argument.

+ singledispatchmethod: A descriptor class that transforms a method into a single-dispatch generic method, 
similar to singledispatch but works on methods instead of functions.

+ update_wrapper(wrapper, wrapped[, assigned][, updated]): A function that updates a wrapper function to look 
like the wrapped function by copying or adding attributes such as name, doc, module, annotations, and qualname.

+ wraps: A decorator that applies update_wrapper to the decorated function.